name: "Publish OSS"
run-name: "Publish OSS - ${{ github.actor }} - package:${{ inputs.package }} deploy-to:${{ inputs.deploy-to }} branch:${{ inputs.branch }} skip-unit-tests:${{ inputs.skip-unit-tests }} skip-integration-tests:${{ inputs.skip-integration-tests }}"

on:
    workflow_dispatch:
        inputs:
            package:
                description: "Choose the package to publish"
                type: choice
                options:
                -   "dbt-adapters"
                -   "dbt-tests-adapter"
                -   "dbt-athena"
                -   "dbt-bigquery"
                -   "dbt-postgres"
                -   "dbt-redshift"
                -   "dbt-snowflake"
                -   "dbt-spark"
            deploy-to:
                description: "Choose whether to publish to test or prod"
                type: choice
                options: ["prod", "test"]
            branch:
                description: "Choose the branch to publish from"
                type: string
                default: "main"
            version:
                description: "Choose the version to bump to (e.g. 1.2.3rc1, patch, release) or leave empty"
                type: string
                default: ""
            skip-unit-tests:
                description: "Skip running unit tests"
                type: boolean
                default: false
            skip-integration-tests:
                description: "Skip running integration tests"
                type: boolean
                default: false

# don't publish to the same target in parallel
concurrency:
    group: Publish_OSS-${{ inputs.package }}-${{ inputs.deploy-to }}
    cancel-in-progress: true

defaults:
    run:
        shell: bash

jobs:
    bump-version:
        if: inputs.version != ''
        uses: ./.github/workflows/_bump-version.yml
        with:
            package: ${{ inputs.package }}
            branch: ${{ inputs.branch }}
            version: ${{ inputs.version }}
        secrets: inherit

    unit-tests:
        if: |
            always() && !failure() &&
            inputs.skip-unit-tests == false &&
            !contains(fromJSON('["dbt-tests-adapter"]'), inputs.package)
        needs: bump-version  # bump-version can be skipped and is not directly used
        uses: ./.github/workflows/_unit-tests.yml
        with:
            package: ${{ inputs.package }}
            branch: ${{ inputs.branch }}

    integration-tests:
        if: |
            always() && !failure() &&
            inputs.skip-integration-tests == false &&
            !contains(fromJSON('["dbt-adapters", "dbt-tests-adapter"]'), inputs.package)
        needs: bump-version  # bump-version can be skipped and is not directly used
        uses: ./.github/workflows/_integration-tests.yml
        with:
            packages: ${{ toJSON(inputs.package) }}
            branch: ${{ inputs.branch }}
        secrets: inherit

    generate-changelog:
        if: always() && !failure()
        needs: [bump-version, unit-tests, integration-tests]
        uses: ./.github/workflows/_generate-changelog.yml
        with:
            package: ${{ inputs.package }}
            merge: ${{ inputs.deploy-to == 'prod' }}
            branch: ${{ inputs.branch }}
        secrets: inherit

    publish:
        if: always() && !failure()
        needs: generate-changelog
        runs-on: ${{ vars.DEFAULT_RUNNER }}
        environment:
            name: ${{ inputs.deploy-to }}
            url: ${{ vars.PYPI_PROJECT_URL }}/${{ inputs.package }}
        permissions:
            # this permission is required for trusted publishing
            # see https://github.com/marketplace/actions/pypi-publish
            id-token: write
        steps:
        -   uses: actions/checkout@v4
            with:
                ref: ${{ needs.generate-changelog.outputs.branch-name || inputs.branch }}
        -   uses: actions/setup-python@v5
            with:
                python-version: ${{ vars.DEFAULT_PYTHON_VERSION }}
        -   uses: pypa/hatch@install
        -   run: hatch build && hatch run build:check-all
            working-directory: ./${{ inputs.package }}
        -   uses: pypa/gh-action-pypi-publish@release/v1
            with:
                repository-url: ${{ vars.PYPI_REPOSITORY_URL }}
                packages-dir: ./${{ inputs.package }}/dist/
        -   id: version
            run: echo "version=$(hatch version)" >> $GITHUB_OUTPUT
            working-directory: ./${{ inputs.package }}
        -   uses: nick-fields/retry@v3
            with:
                timeout_seconds: 10
                retry_wait_seconds: 10
                max_attempts: 15  # 5 minutes: (10s timeout + 10s delay) * 15 attempts
                command: wget ${{ vars.PYPI_PROJECT_URL }}/${{ inputs.package }}/${{ steps.version.outputs.version }}
        # publish dbt-athena-community following dbt-athena
        -   if: inputs.package == 'dbt-athena'
            run: hatch build && hatch run build:check-all
            working-directory: ./dbt-athena-community
        -   if: inputs.package == 'dbt-athena'
            uses: pypa/gh-action-pypi-publish@release/v1
            with:
                repository-url: ${{ vars.PYPI_REPOSITORY_URL }}
                packages-dir: ./dbt-athena-community/dist/
        -   if: inputs.package == 'dbt-athena'
            uses: nick-fields/retry@v3
            with:
                timeout_seconds: 10
                retry_wait_seconds: 10
                max_attempts: 15  # 5 minutes: (10s timeout + 10s delay) * 15 attempts
                command: wget ${{ vars.PYPI_PROJECT_URL }}/dbt-athena-community/${{ steps.version.outputs.version }}
