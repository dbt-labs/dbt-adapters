name: "# Docker release"
run-name: "Docker release - ${{ github.actor }} - package:${{ inputs.package }} deploy-to:${{ inputs.deploy-to }} branch:${{ inputs.branch }}"

permissions:
    packages: write

on:
    workflow_call:
        inputs:
            package:
                description: "Choose the package to publish"
                type: string
                required: true
            deploy-to:
                description: "Choose whether to publish to test or prod"
                type: string
                default: "prod"
            version:
                description: "Choose the version to publish"
                type: string
                required: true
    workflow_dispatch:
        inputs:
            package:
                description: "Choose the package to publish"
                type: choice
                options:
                    -   "dbt-athena"
                    -   "dbt-bigquery"
                    -   "dbt-postgres"
                    -   "dbt-redshift"
                    -   "dbt-snowflake"
                    -   "dbt-spark"
            deploy-to:
                description: "Choose whether to publish to test or prod"
                type: environment
                default: "test"
            version:
                description: "Choose the version to publish"
                type: string
                required: true

jobs:
    publish:
        runs-on: ${{ vars.DEFAULT_RUNNER }}
        steps:
        -   id: tags
            uses: dbt-labs/dbt-release/.github/actions/latest-wrangler@main
            with:
                package_name: ${{ inputs.package }}
                new_version: ${{ inputs.version_number }}
                github_token: ${{ secrets.GITHUB_TOKEN }}
        -   uses: docker/setup-buildx-action@v3
        -   uses: docker/login-action@v3
            with:
                registry: 'ghcr.io'
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}
        -   uses: docker/build-push-action@v6
            with:
                push: ${{ inputs.deploy-to == 'prod' }}
                target: ${{ inputs.package }}
                file: ./Dockerfile
                platforms: 'linux/amd64'
                tags: ${{ steps.tags.outputs.tags }}
                build-args: version=v${{ inputs.version }} py_version=${{ vars.DOCKER_PYTHON_VERSION }}
